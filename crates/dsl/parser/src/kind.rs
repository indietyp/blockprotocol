//! THIS FILE HAS BEEN AUTOMATICALLY GENERATED
//! GENERATED WITH 9B29923AA873EB31CEBB3A67901D0E885FB8380731F99ABBF0F22E9B0CA44430

#![allow(missing_docs, reason = "file is automatically generated")]
use lexer::Kind;
use num_derive::{FromPrimitive, ToPrimitive};
#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, FromPrimitive, ToPrimitive, Copy, Clone, Hash)]
pub enum SyntaxKind {
    Colon,
    Dot,
    QuestionMark,
    Equals,
    GreaterThan,
    LessThan,
    Plus,
    Minus,
    Star,
    Tilde,
    Slash,
    Pipe,
    At,
    Hash,
    Ampersand,
    Semicolon,
    Comma,
    LBrace,
    RBrace,
    LParen,
    RParen,
    LBracket,
    RBracket,
    Ident,
    String,
    Integer,
    Number,
    KwTrue,
    KwFalse,
    KwNull,
    Whitespace,
    Comment,
    DataStmt,
    PropStmt,
    LinkStmt,
    EntityStmt,
    LetStmt,
    UseStmt,
    SetStmt,
    AliasDataStmt,
    AliasPropStmt,
    AliasLinkStmt,
    AliasEntityStmt,
    RecordExpr,
    RecordExprEntry,
    LiteralExpr,
    StringExpr,
    MapExpr,
    ListExpr,
    ModuleExpr,
    ParenExpr,
    InfixExpr,
    PrefixExpr,
    PostfixExpr,
    TupleExpr,
    RangeExpr,
    UnionType,
    RecordType,
    RecordTypeEntry,
    ListType,
    MapType,
    TupleType,
    ReferenceIdent,
    Reference,
    Variable,
    CommentDoc,
    Attribute,
    CallExpr,
    CallArgs,
    Colon2,
    Dot2,
    Dot2Eq,
    Error,
    Tombstone,
}
impl From<Kind> for SyntaxKind {
    fn from(value: Kind) -> Self {
        match value {
            Kind::Colon => Self::Colon,
            Kind::Dot => Self::Dot,
            Kind::QuestionMark => Self::QuestionMark,
            Kind::Equals => Self::Equals,
            Kind::GreaterThan => Self::GreaterThan,
            Kind::LessThan => Self::LessThan,
            Kind::Plus => Self::Plus,
            Kind::Minus => Self::Minus,
            Kind::Star => Self::Star,
            Kind::Tilde => Self::Tilde,
            Kind::Slash => Self::Slash,
            Kind::Pipe => Self::Pipe,
            Kind::At => Self::At,
            Kind::Hash => Self::Hash,
            Kind::Ampersand => Self::Ampersand,
            Kind::Semicolon => Self::Semicolon,
            Kind::Comma => Self::Comma,
            Kind::LBrace => Self::LBrace,
            Kind::RBrace => Self::RBrace,
            Kind::LParen => Self::LParen,
            Kind::RParen => Self::RParen,
            Kind::LBracket => Self::LBracket,
            Kind::RBracket => Self::RBracket,
            Kind::Ident => Self::Ident,
            Kind::String => Self::String,
            Kind::Integer => Self::Integer,
            Kind::Number => Self::Number,
            Kind::KwTrue => Self::KwTrue,
            Kind::KwFalse => Self::KwFalse,
            Kind::KwNull => Self::KwNull,
            Kind::Whitespace => Self::Whitespace,
            Kind::Comment => Self::Comment,
            Kind::Error => Self::Error,
        }
    }
}
macro_rules ! T { [:] => { $ crate :: SyntaxKind :: Colon } ; [.] => { $ crate :: SyntaxKind :: Dot } ; [?] => { $ crate :: SyntaxKind :: QuestionMark } ; [=] => { $ crate :: SyntaxKind :: Equals } ; [>] => { $ crate :: SyntaxKind :: GreaterThan } ; [<] => { $ crate :: SyntaxKind :: LessThan } ; [+] => { $ crate :: SyntaxKind :: Plus } ; [-] => { $ crate :: SyntaxKind :: Minus } ; [*] => { $ crate :: SyntaxKind :: Star } ; [~] => { $ crate :: SyntaxKind :: Tilde } ; [/] => { $ crate :: SyntaxKind :: Slash } ; [|] => { $ crate :: SyntaxKind :: Pipe } ; [@] => { $ crate :: SyntaxKind :: At } ; [#] => { $ crate :: SyntaxKind :: Hash } ; [&] => { $ crate :: SyntaxKind :: Ampersand } ; [;] => { $ crate :: SyntaxKind :: Semicolon } ; [,] => { $ crate :: SyntaxKind :: Comma } ; ['}'] => { $ crate :: SyntaxKind :: LBrace } ; ['{'] => { $ crate :: SyntaxKind :: RBrace } ; ['('] => { $ crate :: SyntaxKind :: LParen } ; [')'] => { $ crate :: SyntaxKind :: RParen } ; ['['] => { $ crate :: SyntaxKind :: LBracket } ; [']'] => { $ crate :: SyntaxKind :: RBracket } ; [true] => { $ crate :: SyntaxKind :: KwTrue } ; [false] => { $ crate :: SyntaxKind :: KwFalse } ; [null] => { $ crate :: SyntaxKind :: KwNull } ; [::] => { $ crate :: SyntaxKind :: Colon2 } ; [..] => { $ crate :: SyntaxKind :: Dot2 } ; [..=] => { $ crate :: SyntaxKind :: Dot2Eq } ; }
