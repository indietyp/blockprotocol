[kind.colon]
token = ":"

[kind.dot]
token = "."

[kind.question-mark]
token = "?"

[kind.equals]
token = "="

[kind.greater-than]
token = ">"

[kind.less-than]
token = "<"

[kind.plus]
token = "+"

[kind.minus]
token = "-"

[kind.star]
token = "*"

[kind.slash]
token = "/"

[kind.pipe]
token = "|"

[kind.at]
token = "@"

[kind.hash]
token = "#"

[kind.ampersand]
token = "&"

[kind.semicolon]
token = ";"

[kind.comma]
token = ","

[kind.l-brace]
token = "{"

[kind.r-brace]
token = "}"

[kind.l-paren]
token = "("

[kind.r-paren]
token = ")"

[kind.l-bracket]
token = "["

[kind.r-bracket]
token = "]"

[kind.ident]
regex = ["[a-zA-Z][a-zA-Z0-9-]*"]

[kind.string]
regex = ['"(?:[^\\"]|\\.)*"', "'(?:[^\\\\']|\\.)*'"]

[kind.integer]
regex = ["[+-]?(([1-9][0-9]*)|0)"]

[kind.number]
regex = ["[+-]?(([1-9][0-9]*)|0)\\.[0-9]+"]
priority = 12

[kind.kw-true]
token = "true"

[kind.kw-false]
token = "false"

[kind.whitespace]
regex = ["\\s"]

[kind.comment]
regex = ["//.*"]

[syntax.data-stmt]
[syntax.prop-stmt]
[syntax.link-stmt]
[syntax.entity-stmt]
[syntax.let-stmt]
[syntax.use-stmt]
[syntax.set-stmt] # TODO: consider removing this (only used for configuration?!)

# TODO: this still uses `=`
[syntax.alias-data-stmt]
[syntax.alias-prop-stmt]
[syntax.alias-link-stmt]
[syntax.alias-entity-stmt]

[syntax.record-expr]
[syntax.record-expr-entry]
[syntax.literal-expr]
# this is special, because a string might be prefixed and suffixed by an identifier
[syntax.string-expr]
[syntax.map-expr]
[syntax.list-expr]
[syntax.module-expr]
[syntax.paren-expr]
[syntax.infix-expr]
[syntax.prefix-expr]
[syntax.postfix-expr]
[syntax.tuple-expr]
[syntax.range-expr]

# TODO: use `:` for types instead of the stmt level
[syntax.union-type]
[syntax.record-type]
[syntax.record-type-entry]
[syntax.list-type]
[syntax.map-type]
[syntax.tuple-type]

[syntax.reference]
[syntax.variable]

[syntax.comment-doc]
[syntax.attribute]

# TODO: function expression and such
[syntax.call-expr]
[syntax.call-args]
