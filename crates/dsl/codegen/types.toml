[kind.colon]
token = ":"
is = ['infix-op']

[kind.dot]
token = "."
is = ['infix-op']

[kind.question-mark]
token = "?"
is = ['postfix-op']

[kind.equals]
token = "="
is = ['infix-op']

[kind.greater-than]
token = ">"
is = ['infix-op']

[kind.less-than]
token = "<"
is = ['infix-op']

[kind.plus]
token = "+"
is = ['infix-op', 'prefix-op']

[kind.minus]
token = "-"
is = ['infix-op', 'prefix-op']

[kind.star]
token = "*"

[kind.tilde]
token = "~"

[kind.slash]
token = "/"
is = ['infix-op']

[kind.pipe]
token = "|"
is = ['infix-op']

[kind.at]
token = "@"

[kind.hash]
token = "#"

[kind.ampersand]
token = "&"

[kind.semicolon]
token = ";"

[kind.comma]
token = ","

[kind.l-brace]
token = "{"

[kind.r-brace]
token = "}"

[kind.l-paren]
token = "("

[kind.r-paren]
token = ")"

[kind.l-bracket]
token = "["

[kind.r-bracket]
token = "]"

# Non reference identifiers are the same as identfiers but allow `_` instead of `-`,
# this is because otherwise we wouldn't be able to distinguish between substraction and
# such. This would otherwise make whitespace significant, which we would like to avoid.
#
# An implementation should search for a token sequence of `ident` `-` `ident` `-` `ident`
# with no trailing `-` for the `reference-ident`.
[kind.ident]
regex = ["[_a-zA-Z][a-zA-Z0-9_]*"]

[kind.string]
regex = [
    '"(?:[^\\"]|\\.)*"',
    '''(?x)
        '(?:[^\\']|\\.)*'
    '''
]
is = ['literal']

[kind.integer]
regex = ["[+-]?(([1-9][0-9]*)|0)"]
is = ['literal']

[kind.number]
regex = ["[+-]?(([1-9][0-9]*)|0)\\.[0-9]+"]
priority = 16
is = ['literal']

[kind.kw-true]
token = "true"
is = ['literal']

[kind.kw-false]
token = "false"
is = ['literal']

[kind.kw-null]
token = "null"
is = ['literal']

[kind.whitespace]
regex = ["\\s"]
is = ['trivia']

[kind.comment]
regex = ["//.*"]
is = ['trivia']

[syntax.data-stmt]
[syntax.prop-stmt]
[syntax.link-stmt]
[syntax.entity-stmt]
[syntax.let-stmt]
[syntax.use-stmt]
[syntax.set-stmt] # TODO: consider removing this (only used for configuration?!)

# TODO: this still uses `=`
[syntax.alias-data-stmt]
[syntax.alias-prop-stmt]
[syntax.alias-link-stmt]
[syntax.alias-entity-stmt]

[syntax.record-expr]
[syntax.record-expr-entry]
[syntax.literal-expr]
# this is special, because a string might be prefixed and suffixed by an identifier
[syntax.string-expr]
[syntax.map-expr]
[syntax.list-expr]
[syntax.module-expr]
[syntax.paren-expr]
[syntax.infix-expr]
[syntax.prefix-expr]
[syntax.postfix-expr]
[syntax.tuple-expr]
[syntax.range-expr]

# TODO: use `:` for types instead of the stmt level
[syntax.union-type]
[syntax.record-type]
[syntax.record-type-entry]
[syntax.list-type]
[syntax.map-type]
[syntax.tuple-type]

# This identifier is only used for references, other variables use the `_`,
# otherwise arithmatic would be impossible.
[syntax.reference-ident]
[syntax.reference]
[syntax.variable]

[syntax.comment-doc]
[syntax.attribute]

# TODO: function expression and such
[syntax.call-expr]
[syntax.call-args]
